#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex_coords;
layout (location = 2) in vec3 normal;
layout (location = 3) in vec4 color;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out mat3 normal_matrix;
out vec3 norm;
out vec2 textureCoordV;

out vec4 vertexColor;

out vec3 worldPosition;

void main()
{
    mat4 modelView = view * model;
    mat3 normMatrix = mat3(transpose(inverse(modelView)));
    normal_matrix = normMatrix;

    worldPosition = vec3(modelView * vec4(position, 1.0));
    
    norm = vec3(normMatrix * normal);

    vec2 uv = position.xy/2.0 + vec2(0.5);
    //textureCoordV = vec2(tex_coords.xy);

    //gl_Position = vec4(position.x, position.y, position.z, 1.0);
    gl_Position = projection * view * model * vec4(position, 1.0);
    vertexColor = color;
}